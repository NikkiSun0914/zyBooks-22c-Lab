//15.14 LAB: Binary search
//Nikki Sun - Dec 10/2022 Â  Rain
//Binary search can be implemented as a recursive algorithm. Each call makes a recursive call on one-half of the list the call received as an argument.
//
//Complete the recursive function BinarySearch() with the following specifications:
//
//Parameters:
//a target integer
//a vector of integers
//lower and upper bounds within which the recursive call will search
//Return value:
//the index within the vector where the target is located
//-1 if target is not found
//The template provides the main program and a helper function that reads a vector from input.
//
//The algorithm begins by choosing an index midway between the lower and upper bounds.
//
//If target == integers.at(index) return index
//If lower == upper, return -1 to indicate not found
//Otherwise call the function recursively on half the vector parameter:
//If integers.at(index) < target, search the vector from index + 1 to upper
//If integers.at(index) > target, search the vector from lower to index - 1
//The vector must be ordered, but duplicates are allowed.
//
//Once the search algorithm works correctly, add the following to BinarySearch():
//
//Count the number of calls to BinarySearch().
//Count the number of times when the target is compared to an element of the vector. Note: lower == upper should not be counted.
//Hint: Use a global variable to count calls and comparisons.
//
//The input of the program consists of:
//
//the number of integers in the vector
//the integers in the vector
//the target to be located
//Ex: If the input is:
//
//9
//1 2 3 4 5 6 7 8 9
//2
//the output is:
//
//index: 1, recursions: 2, comparisons: 3
//









#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int recursions{0};
int comparisons{0};
// Read integers from input and store them in a vector.
// Return the vector.
vector<int> ReadIntegers() {
   int size;
   cin >> size;
   vector<int> integers(size);
   for (int i = 0; i < size; ++i) {               // Read the numbers
      cin >> integers.at(i);
      }
   sort(integers.begin(), integers.end());
   return integers;
}

int BinarySearch(int target, vector<int> integers, int lower, int upper) {
    /* Type your code here. */
    
    // Count the number of calls to BinarySearch().
    recursions++;
    
    
    //The algorithm begins by choosing an index midway between the lower and upper bounds.
    int mid=(lower+upper)/2;
    // 1. If target == integers.at(index) return index
    if(target==integers.at(mid)){
        comparisons++;
        return mid;
    }
    else{
        comparisons++;
    }
    // 2. If lower == upper, return -1 to indicate not found
    if(lower==upper){
        return -1;
    }
    // 3. Otherwise call the function recursively on half the vector parameter:
    else {
        if(integers.at(mid)<target){
            comparisons++;
            return BinarySearch(target, integers, mid+1, upper);
        }
        else if(integers.at(mid)>target){
            comparisons++;
            return BinarySearch(target, integers, lower, mid-1);
        }
        return mid;
    }
 
}
    


int main() {
   int target;
   int index;

   vector<int> integers = ReadIntegers();

   cin >> target;

   index = BinarySearch(target, integers, 0, integers.size() - 1);
   printf("index: %d, recursions: %d, comparisons: %d\n",
          index, recursions, comparisons);

   return 0;
}
